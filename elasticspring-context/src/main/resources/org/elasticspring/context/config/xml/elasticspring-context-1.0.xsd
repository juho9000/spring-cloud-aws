<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright 2013 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xsd:schema xmlns="http://www.elasticspring.org/schema/context"
			xmlns:xsd="http://www.w3.org/2001/XMLSchema"
			xmlns:tool="http://www.springframework.org/schema/tool"
			targetNamespace="http://www.elasticspring.org/schema/context"
			elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans"
				schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd" />
	<xsd:import namespace="http://www.springframework.org/schema/tool"
				schemaLocation="http://www.springframework.org/schema/tool/spring-tool-3.1.xsd" />

	<xsd:element name="context-credentials">
		<xsd:annotation>
			<xsd:documentation source="java:org.elasticspring.context.credentials.CredentialsProviderFactoryBean">
				<![CDATA[
	Creates the authentication configuration which will be used to authenticate the request made from this application context to the particular service.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.amazonaws.auth.AWSCredentialsProvider" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:all>
				<xsd:element name="simple-credentials" type="simpleCredentialsType" minOccurs="0" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							Simple credentials which can be used to configure the static credentials. This credentials
							can be either hard-coded in the XML (not recommended), evaluated through an EL expression or
							replaced by a property place holder variable.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="security-token-credentials" type="simpleCredentialsType" minOccurs="0" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							Security token credentials will be fetched during the runtime. The credentials configured
							here are used to actually fetch the temporary credentials which will be used to actually
							call the services. These "proxy" credentials must be valid and have the access-rights in
							order to get the concrete credentials.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="instance-profile-credentials" minOccurs="0" maxOccurs="1">
					<xsd:annotation>
						<xsd:documentation>
							This credentials will be fetched through the particular instance profile. So there is no
							need to define any additional information. NOTE: In order to use the instance profile
							credentials, the application context must run inside an EC2 instance.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:all>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="context-resource-loader">
		<xsd:annotation>
			<xsd:documentation
					source="java:org.elasticspring.context.config.xml.SimpleStorageLoaderBeanDefinitionParser">
				Configures a resource loader that supports amazon S3 resources to be loaded by the application context
				resource loader.
			</xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="org.springframework.core.io.ResourceLoader" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="locationAwareType" />
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="context-region">
		<xsd:annotation>
			<xsd:documentation source="java:org.elasticspring.context.credentials.ContextRegionBeanDefinitionParser">
				<![CDATA[
				Configures the application context wide region provider used for all webservice access to the amazon webservices
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="org.elasticspring.core.region.RegionProvider" />
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="locationAwareType">
					<xsd:attribute name="auto-detect" type="xsd:boolean" default="false">
						<xsd:annotation>
							<xsd:documentation>Defines that the region should be auto detected through the EC2 meta data
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:complexType name="locationAwareType">
		<xsd:annotation>
			<xsd:documentation>
				Abstract type which can be extended by components which are location and hence region aware. This type
				allows users to configure the particular region.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="region" type="regionType" use="optional">
			<xsd:annotation>
				<xsd:documentation>The region that will be used by this context loader. As Amazon S3 has a global
					region this setting is optional and only useful to use the more direct endpoint to access the S3
					resource. The resources are however (in contrast to other services) visible with every region.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="region-provider" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type
								type="org.elasticspring.core.region.RegionProvider" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>


	<xsd:complexType name="simpleCredentialsType">
		<xsd:attribute name="access-key" use="required">
			<xsd:annotation>
				<xsd:documentation>
					The access key used to make the request. An access key is assigned to one account or IAM user.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:minLength value="1" />
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="secret-key" use="required">
			<xsd:annotation>
				<xsd:documentation>
					The secret key which is assigned for the particular access key.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:minLength value="1" />
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:simpleType name="regionType">
		<xsd:annotation>
			<xsd:documentation>The region type which could be a directly enumerated string or an expression or
				placeholder
			</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="regionTypeEnumeration expressionType placeholderType" />
	</xsd:simpleType>

	<xsd:simpleType name="regionTypeEnumeration">
		<xsd:annotation>
			<xsd:documentation>
				The logical name of the region. Possible regions are available on
				http://docs.amazonwebservices.com/general/latest/gr/rande.html
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="US_EAST_1" />
			<xsd:enumeration value="US_WEST_1" />
			<xsd:enumeration value="US_WEST_2" />
			<xsd:enumeration value="EU_WEST_1" />
			<xsd:enumeration value="AP_SOUTHEAST_1" />
			<xsd:enumeration value="AP_SOUTHEAST_2" />
			<xsd:enumeration value="AP_NORTHEAST_1" />
			<xsd:enumeration value="SA_EAST_1" />
			<xsd:enumeration value="CN_NORTH_1" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="expressionType">
		<xsd:annotation>
			<xsd:documentation>Type that can be used if regular expression like #{foo.bar} should be allowed in a
				normally fixed enumeration. This is useful to allow enumerations to be resolved at runtime
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[#]\{.+\}" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="placeholderType">
		<xsd:annotation>
			<xsd:documentation>Type that can be used if placeholder expression like ${foo.bar} should be allowed in a
				normally fixed enumeration. This is useful to allow enumerations to be resolved at configuration time
				through a property source
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[$]\{.+\}" />
		</xsd:restriction>
	</xsd:simpleType>


	<xsd:element name="cache-manager">
		<xsd:annotation>
			<xsd:documentation>
				Configures a cache manager based on SpyMemcached that uses the AWS ElastiCache service.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:all>
				<xsd:element name="cache-ref" type="cacheRefType" minOccurs="0" />
				<xsd:element name="cache-cluster" type="cacheClusterType" minOccurs="0" />
				<xsd:element name="cache" type="cacheConfigurationType" minOccurs="0" />
			</xsd:all>
			<xsd:attribute name="id" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The id of the cache manager
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<xsd:complexType name="abstractCacheConfiguration" abstract="true">
		<xsd:attribute name="allowClear" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>
					Defines if the given cache can be cleared.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="expiration" type="xsd:int" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Defines the expiration time in seconds of a cache entry.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="cacheConfigurationType">
		<xsd:complexContent>
			<xsd:extension base="abstractCacheConfiguration">
				<xsd:attribute name="address" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							The address of the cache
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="name" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							The name of the cache.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="cacheClusterType">
		<xsd:complexContent>
			<xsd:extension base="abstractCacheConfiguration">
				<xsd:attribute name="cacheCluster" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>
							Defines the cache cluster name
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="cacheRefType">
		<xsd:attribute name="ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>
					A reference to a bean that implements the org.springframework.cache.Cache interface.
				</xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="org.springframework.cache.Cache" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
</xsd:schema>
