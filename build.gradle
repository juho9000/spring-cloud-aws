/*
 * Copyright 2010-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.1")
        classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.4")
    }
}

configure(allprojects) {
    group = 'org.elasticspring'
    version = '0.1'

    apply plugin: 'maven'
    apply plugin: "project-report"

    repositories {
        mavenCentral()
    }

    ext.javadocLinks = [
            "http://docs.oracle.com/javase/6/docs/api",
            "http://docs.oracle.com/javaee/6/api",
            "http://aopalliance.sourceforge.net/doc",
            "http://www.eclipse.org/aspectj/doc/released/aspectj5rt-api/",
            "http://hc.apache.org/httpclient-3.x/apidocs",
            "http://fasterxml.github.com/jackson-core/javadoc/2.0.0",
            "http://jackson.codehaus.org/1.4.2/javadoc",
            "http://static.springsource.org/spring/docs/3.1.x/javadoc-api/"
    ] as String[]
}

configure(subprojects) {

    apply plugin: 'java'
    apply plugin: "propdeps"
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'

    // Custom properties
    ext {
        springFrameworkVersion = "3.1.0.RELEASE"
        junitVersion = '4.10'
        slf4jVersion = '1.7.2'
        log4jVersion = '1.2.17'
        awsSdkVersion = '1.3.27'
        mockitoVersion = '1.9.5'
        tomcatVersion = "7.0.34"
    }

    //Default dependencies
    dependencies {
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        testRuntime("org.slf4j:slf4j-jcl:${slf4jVersion}")
        testRuntime("log4j:log4j:${log4jVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.mockito:mockito-all:${mockitoVersion}")
    }

    //Configure java compiler
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs = ['-Xlint:-options'] // disable options warning about boot class path
    }

    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
        options.links(project.ext.javadocLinks)
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    test {
        systemProperty("java.awt.headless", "true")
    }
}

project('elasticspring-core') {
    description = 'elasticspring core'
    dependencies {
        compile("org.springframework:spring-core:${springFrameworkVersion}")
        compile("com.amazonaws:aws-java-sdk:1.3.26") {
            exclude module: "stax-api"
            exclude module: "activation"
        }
        compile("org.springframework:spring-beans:${springFrameworkVersion}")
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
        testCompile("org.springframework:spring-context:${springFrameworkVersion}")
    }
}


project('elasticspring-context') {
    description = 'elasticspring context'
    dependencies {
        compile project(":elasticspring-core")
        compile("org.springframework:spring-context:${springFrameworkVersion}")
        optional("org.springframework:spring-context-support:${springFrameworkVersion}")
        optional("javax.mail:mailapi:1.4.3") {
            exclude module: "activation"
        }
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
    }
}

project('elasticspring-jdbc') {
    description = 'elasticspring jdbc'
    dependencies {
        compile project(":elasticspring-context")
        compile("org.springframework:spring-jdbc:${springFrameworkVersion}")

        optional("org.apache.tomcat:tomcat-jdbc:${tomcatVersion}") {
            exclude module: "tomcat-juli"
        }

        testRuntime("mysql:mysql-connector-java:5.1.16")
        testRuntime("org.apache.tomcat.extras:tomcat-extras-juli-adapters:${tomcatVersion}")
        testRuntime("org.springframework:spring-test:${springFrameworkVersion}")
    }
}


project('elasticspring-messaging') {
    description = 'elasticspring messaging'
    dependencies {
        compile project(":elasticspring-context")
        optional("org.springframework:spring-oxm:${springFrameworkVersion}")
        optional("com.thoughtworks.xstream:xstream:1.4.2") {
            exclude module: "xpp3_min"
        }
        optional("org.codehaus.jettison:jettison:1.3.1") {
            exclude module: "stax-api"
        }
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
    }
}

project('elasticspring-integration-test') {
    description = 'elasticspring integration test on AWS'
    dependencies {
        testCompile project(":elasticspring-core")
        testCompile project(":elasticspring-context")
        testCompile project(":elasticspring-jdbc")
        testCompile project(":elasticspring-messaging")
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")

        testRuntime("org.apache.tomcat:tomcat-jdbc:${tomcatVersion}") {
            exclude module: "tomcat-juli"
        }

        testRuntime("mysql:mysql-connector-java:5.1.16")
        testRuntime("org.apache.tomcat.extras:tomcat-extras-juli-adapters:${tomcatVersion}")
        testRuntime("org.springframework:spring-oxm:${springFrameworkVersion}")
        testRuntime("com.thoughtworks.xstream:xstream:1.4.2") {
            exclude module: "xpp3_min"
        }
        testRuntime("org.codehaus.jettison:jettison:1.3.1") {
            exclude module: "stax-api"
        }
        testRuntime("javax.mail:mailapi:1.4.3") {
            exclude module: "activation"
        }
        testCompile("org.springframework:spring-context-support:${springFrameworkVersion}")
    }

    final configDir = System.getProperty("els.config.dir", null)
    if (configDir != null) {
        test.systemProperty("els.config.dir", configDir)
        test.systemProperty("test-groups", "aws-test")
    }

}


configure(rootProject) {
    description = 'ElasticSpring'

    apply plugin: "docbook-reference"

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    task api(type: Javadoc) {
        group = "Documentation"
        description = "Generates aggregated Javadoc API documentation."
        title = "${rootProject.description} ${version} API"

        dependsOn {
            subprojects.collect {
                it.tasks.getByName("jar")
            }
        }
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.splitIndex = true
        options.links(project.ext.javadocLinks)

        source subprojects.collect { project ->
            project.sourceSets.main.allJava
        }

        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath
        })

        maxMemory = "1024m"
        destinationDir = new File(buildDir as String, "api")
    }

    task docsZip(type: Zip) {
        group = "Distribution"
        baseName = "elastic-spring"
        classifier = "docs"
        description = "Builds -${classifier} archive containing api and reference "

        from(api) {
            into "javadoc-api"
        }

        from(reference) {
            into "elastic-spring-reference"
        }
    }

    task schemaZip(type: Zip) {
        group = "Distribution"
        baseName = "elastic-spring"
        classifier = "schema"
        description = "Builds -${classifier} archive containing all " +
                "XSDs for deployment at http://www.elasticspring.org/schema/."

        subprojects.each { subproject ->
            def Properties schemas = new Properties();

            subproject.sourceSets.main.resources.find {
                it.path.endsWith("META-INF/spring.schemas")
            }?.withInputStream { schemas.load(it) }

            for (def key : schemas.keySet()) {
                def shortName = key.replaceAll(/http.*schema.(.*).elasticspring-.*/, '$1')
                assert shortName != key
                File xsdFile = subproject.sourceSets.main.resources.find {
                    it.path.endsWith(schemas.get(key))
                } as File
                assert xsdFile != null
                into(shortName) {
                    from xsdFile.path
                }
            }
        }
    }

    task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
        group = "Distribution"
        baseName = "elastic-spring"
        classifier = "dist"
        description = "Builds -${classifier} archive, containing all jars and docs, " +
                "suitable for community download page."

        ext.baseDir = "${baseName}-${project.version}";

        from(zipTree(docsZip.archivePath)) {
            into "${baseDir}/docs"
        }

        from(zipTree(schemaZip.archivePath)) {
            into "${baseDir}/schema"
        }

        subprojects.each { subproject ->
            into("${baseDir}/libs") {
                from subproject.jar
                if (subproject.tasks.findByPath("sourcesJar")) {
                    from subproject.sourcesJar
                }
                if (subproject.tasks.findByPath("javadocJar")) {
                    from subproject.javadocJar
                }
            }
        }
    }

    artifacts {
        archives docsZip
        archives schemaZip
        archives distZip
    }

    reference {
        sourceDir = file("src/reference/docbook")
        pdfFilename = "elasticspring-reference.pdf"
    }


    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '1.3'
    }
}


