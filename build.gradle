/*
 * Copyright 2010-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



configure(allprojects) {
    apply plugin: 'maven'
    apply plugin: 'java'

    ext.springFrameworkVersion = "3.1.0.RELEASE"
    ext.junitVersion = '4.10'
    ext.slf4jVersion = '1.7.2'
    ext.log4jVersion = '1.2.17'
    ext.awsSdkVersion = '1.3.27'
    ext.mockitoVersion = '1.9.5'


    tasks.withType(Compile) {
        options.encoding = 'UTF-8'
    }

    group = 'org.elasticspring'
    version = '0.1'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

    test.systemProperty("java.awt.headless", "true")

    repositories {
        mavenCentral()
    }
}

configure(subprojects) {


    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    dependencies {
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        testCompile("org.slf4j:slf4j-jcl:${slf4jVersion}")
        testCompile("log4j:log4j:${log4jVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.mockito:mockito-all:${mockitoVersion}")
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project('elasticspring-core') {
    description = 'elasticspring core'
    dependencies {
        compile("org.springframework:spring-core:${springFrameworkVersion}")
        compile("org.springframework:spring-beans:${springFrameworkVersion}")
        compile("com.amazonaws:aws-java-sdk:1.3.26") {
            exclude module: "stax-api"
            exclude module: "activation"
        }
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
        testCompile("org.springframework:spring-context:${springFrameworkVersion}")
    }
}


project('elasticspring-context') {
    description = 'elasticspring context'
    dependencies {
        compile project(":elasticspring-core")
        compile("org.springframework:spring-context:${springFrameworkVersion}")
        compile("org.springframework:spring-context-support:${springFrameworkVersion}")
        compile("javax.mail:mailapi:1.4.3") {
            exclude module: "activation"
        }
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
    }
}

project('elasticspring-jdbc') {
    description = 'elasticspring jdbc'
    dependencies {
        compile project(":elasticspring-context")
        compile("org.springframework:spring-jdbc:${springFrameworkVersion}")
        compile("mysql:mysql-connector-java:5.1.16")
        compile("commons-dbcp:commons-dbcp:1.4")
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
    }
}


project('elasticspring-messaging') {
    description = 'elasticspring messaging'
    dependencies {
        compile project(":elasticspring-context")
        compile("org.springframework:spring-oxm:${springFrameworkVersion}")
        compile("com.thoughtworks.xstream:xstream:1.4.2") {
            exclude module: "xpp3_min"
        }
        compile("org.codehaus.jettison:jettison:1.3.1") {
            exclude module: "stax-api"
        }
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
    }
}


configure(rootProject) {
    description = 'Elastic Spring'

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()


    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '1.3'
    }
}


