/*
 * Copyright 2010-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.1")
        classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.4")
    }
}


configure(allprojects) {
    group = 'org.elasticspring'
    version = '0.1'

    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: "propdeps"
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: "project-report"

    ext.springFrameworkVersion = "3.1.0.RELEASE"
    ext.junitVersion = '4.10'
    ext.slf4jVersion = '1.7.2'
    ext.log4jVersion = '1.2.17'
    ext.awsSdkVersion = '1.3.27'
    ext.mockitoVersion = '1.9.5'
    ext.tomcatVersion = "7.0.34"
    ext.springRetryVersion = "1.0.0.RELEASE"


    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs = ['-Xlint:-options']
    }

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    test.systemProperty("java.awt.headless", "true")

    repositories {
        mavenCentral()
    }
}

configure(subprojects) {


    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    dependencies {
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        testRuntime("org.slf4j:slf4j-jcl:${slf4jVersion}")
        testRuntime("log4j:log4j:${log4jVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.mockito:mockito-all:${mockitoVersion}")
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project('elasticspring-core') {
    description = 'elasticspring core'
    dependencies {
        compile("org.springframework:spring-core:${springFrameworkVersion}")
        compile("com.amazonaws:aws-java-sdk:1.3.26") {
            exclude module: "stax-api"
            exclude module: "activation"
        }
        compile("org.springframework:spring-beans:${springFrameworkVersion}")
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
        testCompile("org.springframework:spring-context:${springFrameworkVersion}")
    }
}


project('elasticspring-context') {
    description = 'elasticspring context'
    dependencies {
        compile project(":elasticspring-core")
        compile("org.springframework:spring-context:${springFrameworkVersion}")
        optional("org.springframework:spring-context-support:${springFrameworkVersion}")
        optional("javax.mail:mailapi:1.4.3") {
            exclude module: "activation"
        }
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
    }
}

project('elasticspring-jdbc') {
    description = 'elasticspring jdbc'
    dependencies {
        compile project(":elasticspring-context")
        compile("org.springframework:spring-jdbc:${springFrameworkVersion}")

        optional("org.apache.tomcat:tomcat-jdbc:${tomcatVersion}") {
            exclude module: "tomcat-juli"
        }

        optional("org.springframework.retry:spring-retry:${springRetryVersion}") {
            exclude module: "spring-context"
        }

        testRuntime("mysql:mysql-connector-java:5.1.16")
        testRuntime("org.apache.tomcat.extras:tomcat-extras-juli-adapters:${tomcatVersion}")
        testRuntime("org.springframework:spring-test:${springFrameworkVersion}")
    }
}


project('elasticspring-messaging') {
    description = 'elasticspring messaging'
    dependencies {
        compile project(":elasticspring-context")
        optional("org.springframework:spring-oxm:${springFrameworkVersion}")
        optional("com.thoughtworks.xstream:xstream:1.4.2") {
            exclude module: "xpp3_min"
        }
        optional("org.codehaus.jettison:jettison:1.3.1") {
            exclude module: "stax-api"
        }
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")
    }
}

project('elasticspring-integration-test') {
    description = 'elasticspring integration test on AWS'
    dependencies {
        testCompile project(":elasticspring-core")
        testCompile project(":elasticspring-context")
        testCompile project(":elasticspring-jdbc")
        testCompile project(":elasticspring-messaging")
        testCompile("org.springframework:spring-test:${springFrameworkVersion}")

        testRuntime("org.apache.tomcat:tomcat-jdbc:${tomcatVersion}") {
            exclude module: "tomcat-juli"
        }

        testRuntime("mysql:mysql-connector-java:5.1.16")
        testRuntime("org.apache.tomcat.extras:tomcat-extras-juli-adapters:${tomcatVersion}")
        testRuntime("org.springframework:spring-oxm:${springFrameworkVersion}")
        testRuntime("com.thoughtworks.xstream:xstream:1.4.2") {
            exclude module: "xpp3_min"
        }
        testRuntime("org.codehaus.jettison:jettison:1.3.1") {
            exclude module: "stax-api"
        }
        testRuntime("javax.mail:mailapi:1.4.3") {
            exclude module: "activation"
        }
        testRuntime("org.springframework.retry:spring-retry:${springRetryVersion}") {
            exclude module: "spring-context"
        }
        testCompile("org.springframework:spring-context-support:${springFrameworkVersion}")
        testRuntime("org.aspectj:aspectjweaver:1.7.1")
    }

    final configDir = System.getProperty("els.config.dir", null)
    if (configDir != null) {
        test.systemProperty("els.config.dir", configDir)
        test.systemProperty("test-groups", "aws-test")
    }

}


configure(rootProject) {
    description = 'ElasticSpring'

    apply plugin: "docbook-reference"

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()


    reference {
        sourceDir = file("src/reference/docbook")
        pdfFilename = "elasticspring-reference.pdf"
    }


    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '1.3'
    }
}


