/*
 * Copyright 2013-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




import java.text.SimpleDateFormat

ext.buildenvironment = [
        commitId: determineCommitId(),
        username: System.properties["user.name"],
        hostname: determineHostName(),
        javaVersion: System.properties["java.version"],
        osName: System.properties["os.name"],
        osVersion: System.properties["os.version"],
        timeStamp: new SimpleDateFormat("yyyy.MM.dd").format(new Date())
]

def String determineCommitId() {
    def strategies = []

    def env = System.getenv()
    def commitId = null;

    // Builds of Gradle happening on the CI server
    strategies << {
        env["BUILD_VCS_NUMBER"]
    }

    // For the discovery builds, this points to the ElasticSpring revision
    strategies << {
        env.find { it.key.startsWith("build.vcs.number.ElasticSpring_on_GitHub") }?.value
    }

    // If it's a checkout, ask Git for it
    strategies << {
        if (file(".git/HEAD").exists()) {
            def baos = new ByteArrayOutputStream()
            def execResult = exec {
                ignoreExitValue = true
                commandLine = ["git", "log", "-1", "--format=%H"]
                if (System.getProperty("os.name").toLowerCase().indexOf("win") >= 0) {
                    commandLine = ["cmd", "/c"] + commandLine
                }

                standardOutput = baos
            }
            if (execResult.exitValue == 0) {
                new String(baos.toByteArray(), "utf8").trim()
            } else {
                // Read commit id directly from filesystem
                def headRef = file(".git/HEAD").text
                headRef = headRef.replaceAll('ref: ', '').trim()
                file(".git/$headRef").text.trim()
            }
        } else {
            null
        }
    }

    for (strategy in strategies) {
        commitId = strategy()
        if (commitId) {
            break
        }
    }
    if (!commitId) {
        throw new InvalidUserDataException("Could not determine commit id") as Throwable
    }
    commitId
}

def String determineHostName() {
    def hostName
    try {
        hostName = InetAddress.localHost.hostName
    } catch (UnknownHostException ignored) {
        hostName = "unknown"
    }
    hostName
}