/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.gradle.plugins.ide.idea.model.IdeaModule
import org.gradle.plugins.ide.idea.model.SingleEntryModuleLibrary

allprojects {
    apply plugin: "idea"
    apply plugin: 'propdeps-idea'
}


idea {
    project {
        jdkName = '1.6'
        languageLevel = '1.6'

        wildcards += ['?*.gradle']

        ipr {
            withXml { provider ->
                // Use git
                def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = 'Git'

                //Entry Points for inspections
                def entryPoints = new XmlParser().parseText('''<component name="EntryPointsManager">
                                        <entry_points version="2.0" />
                                        <list size="5">
                                              <item index="0" class="java.lang.String" itemvalue="org.elasticspring.core.support.documentation.RuntimeUse" />
                                              <item index="1" class="java.lang.String" itemvalue="org.elasticspring.messaging.config.annotation.QueueListener" />
                                              <item index="2" class="java.lang.String" itemvalue="org.elasticspring.messaging.config.annotation.TopicListener" />
                                              <item index="3" class="java.lang.String" itemvalue="org.springframework.beans.factory.annotation.Autowired" />
                                              <item index="4" class="java.lang.String" itemvalue="org.springframework.beans.factory.annotation.Value" />
                                            </list>
                                  </component>''')
                entryPoints
                node.append(entryPoints)

                // Set gradle home
                def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
                gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])

                // set compiler heap space
                def javacSettings = node.appendNode('component', [name: 'JavacSettings'])
                javacSettings.appendNode('option', [name: 'MAXIMUM_HEAP_SIZE', value: "256"])

                // license header
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "ASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "ASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parseText('''
                      <copyright>
                          <option name="notice" value="Copyright 2013 the original author or authors.&#10;&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;&#10;     http://www.apache.org/licenses/LICENSE-2.0&#10;&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License." />
                          <option name="keyword" value="Copyright" />
                          <option name="allowReplaceKeyword" value="" />
                          <option name="myName" value="ASL2" />
                          <option name="myLocal" value="true" />
                      </copyright>
                '''))
                }

                // Code formatting options
                def codeFormatSettings = new XmlParser().parse(new File(rootDir as String, "gradle/idea/codeStyleSettings.xml"))
                node.append(codeFormatSettings)

                //Inspections
                def inspectionProfileManager = new XmlParser().parseText('''<component name="InspectionProjectProfileManager">
                                    <profiles>
                                    </profiles>
                                    <option name="PROJECT_PROFILE" value="Idea" />
                                    <option name="USE_PROJECT_PROFILE" value="true" />
                                    <version value="1.0" />
                                  </component>''')
                node.append(inspectionProfileManager)

                def ideaInspectionProfile = new XmlParser().parse(new File(rootDir as String, "gradle/idea/IDEA.xml"))
                def profiles = inspectionProfileManager.find { it.name() == 'profiles' }
                profiles.append(ideaInspectionProfile)

                //Scopes
                def scopeComponent = node.component.find { it.'@name' == 'DependencyValidationManager' }
                def mainScope = new XmlParser().parseText(''' <scope name="Main" pattern="file:src/main//*||file:src/test//*" />''')
                scopeComponent.append(mainScope)

                //XML catalog
                def projectResource = new XmlParser().parseText('''
                        <component name="ProjectResources">
                            <resource url="http://www.elasticspring.org/schema/jdbc/elasticspring-jdbc-1.0.xsd" location="$PROJECT_DIR$/elasticspring-jdbc/src/main/resources/org/elasticspring/jdbc/config/xml/elasticspring-jdbc-1.0.xsd" />
                            <resource url="http://www.elasticspring.org/schema/context/elasticspring-context-1.0.xsd" location="$PROJECT_DIR$/elasticspring-context/src/main/resources/org/elasticspring/context/config/xml/elasticspring-context-1.0.xsd" />
                            <resource url="http://www.elasticspring.org/schema/messaging/elasticspring-messaging-1.0.xsd" location="$PROJECT_DIR$/elasticspring-messaging/src/main/resources/org/elasticspring/messaging/config/xml/elasticspring-messaging-1.0.xsd" />
                            <resource url="http://www.springframework.org/schema/util/spring-util-3.1.xsd" location="''' + getLibraryForArtifact(modules as List<IdeaModule>, "spring-beans") + '''!/org/springframework/beans/factory/xml/spring-util-3.1.xsd" />
                            <resource url="http://www.springframework.org/schema/tool/spring-tool-3.1.xsd" location="''' + getLibraryForArtifact(modules as List<IdeaModule>, "spring-beans") + '''!/org/springframework/beans/factory/xml/spring-tool-3.1.xsd" />
                            <resource url="http://www.springframework.org/schema/context/spring-context-3.1.xsd" location="''' + getLibraryForArtifact(modules as List<IdeaModule>, "spring-context") + '''!/org/springframework/context/config/spring-context-3.1.xsd" />
                            <resource url="http://www.springframework.org/schema/aop/spring-aop-3.1.xsd" location="''' + getLibraryForArtifact(modules as List<IdeaModule>, "spring-aop") + '''!/org/springframework/aop/config/spring-aop-3.1.xsd" />
                            <resource url="http://www.springframework.org/schema/tx/spring-tx-3.1.xsd" location="''' + getLibraryForArtifact(modules as List<IdeaModule>, "spring-tx") + '''!/org/springframework/transaction/config/spring-tx-3.1.xsd" />
                            <resource url="log4j.dtd" location="''' + getLibraryForArtifact(modules as List<IdeaModule>, "log4j-1") + '''!/org/apache/log4j/xml/log4j.dtd" />
                            <resource url="http://jakarta.apache.org/log4j/" location="''' + getLibraryForArtifact(modules as List<IdeaModule>, "log4j-1") + '''!/org/apache/log4j/xml/log4j.dtd" />
                        </component>''')
                node.append(projectResource)
            }
        }
    }

    module {
        downloadJavadoc = true
        downloadSources = true

    }
}


def String getLibraryForArtifact(List<IdeaModule> ideaModule, String moduleName) {
    def libraryFiles = ideaModule*.resolveDependencies()*.findResult {
        if (it instanceof SingleEntryModuleLibrary) {
            it.libraryFile.name.startsWith(moduleName) ? it : null
        }
    }
    return libraryFiles.find { it != null ? it.libraryFile : null }.libraryFile.absolutePath
}
